{"version":3,"sources":["components/dashboard/Dashboard.tsx","components/navi/Navi.tsx","components/transaction/AddTo.tsx","components/transaction/initialStore.tsx","components/transaction/EditTo.tsx","components/transaction/TransactionList.tsx","components/transaction/Transaction.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Dashboard","className","ListGroup","ListGroupItem","active","Navi","Component","AddTo","addToStore","total","useState","name","setName","description","setDescription","date","setDate","amount","setAmount","currency","setCurrency","modal","setModal","toggle","Button","color","onClick","Modal","isOpen","ModalBody","Form","FormGroup","Input","type","placeholder","value","onChange","e","target","ModalFooter","preventDefault","length","alert","initialStore","id","EditTo","current","openEdit","cur","TransactionList","store","handleDelete","editIs","inProp","Table","map","s","CSSTransition","in","timeout","classNames","key","scope","Transaction","setStore","setTotal","setCurrent","setInProp","filter","Fragment","selected","setTimeout","newStore","App","Row","Col","xs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aab712fd.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Dashboard.css'\r\nimport { ListGroup, ListGroupItem } from 'reactstrap';\r\n\r\nfunction Dashboard() {\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <ListGroup>\r\n                <ListGroupItem ><h6>Dashboard</h6></ListGroupItem>\r\n                <ListGroupItem active><h6>Transactions</h6></ListGroupItem>\r\n                <ListGroupItem><h6>Accounts</h6></ListGroupItem>\r\n                <ListGroupItem><h6>Settings</h6></ListGroupItem>\r\n            </ListGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","import React, { Component } from 'react'\r\nimport './Navi.css'\r\n\r\nexport default class Navi extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Navi\">\r\n                <h3>Clevel Task</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState, ChangeEvent, FormEvent } from 'react';\r\nimport { Button, Modal, ModalBody, ModalFooter, Form, Input, FormGroup } from 'reactstrap';\r\nimport { AddToStore } from './types'\r\n\r\ninterface AddToProps {\r\n    addToStore: AddToStore\r\n    total: number\r\n\r\n}\r\nconst AddTo: React.FC<AddToProps> = ({ addToStore, total }) => {\r\n    const [name, setName] = useState(\"\")\r\n    const [description, setDescription] = useState(\"\")\r\n    const [date, setDate] = useState(\"\")\r\n    const [amount, setAmount] = useState(\"\")\r\n    const [currency, setCurrency] = useState(\"TRY\")\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const toggle = () => setModal(!modal);\r\n\r\n    const handleChangeName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.target.value)\r\n\r\n    }\r\n    const handleChangeDescription = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setDescription(e.target.value)\r\n\r\n    }\r\n    const handleChangeDate = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setDate(e.target.value)\r\n\r\n    }\r\n    const handleChangeAmount = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setAmount(e.target.value)\r\n\r\n    }\r\n    const handleChangeCurrency = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setCurrency(e.target.value)\r\n\r\n    }\r\n    const handleSubmit = (e: FormEvent<HTMLButtonElement>) => {\r\n        toggle()\r\n        e.preventDefault()\r\n        if (name.length === 0 && description.length === 0 && date.length === 0 && amount.length === 0) {\r\n            alert(\"Can not be empty!\")\r\n        } else {\r\n            addToStore(total, name, description, date, amount, currency)\r\n            setAmount(\"\")\r\n            setName(\"\")\r\n            setDescription(\"\")\r\n            setCurrency(\"\")\r\n            setDate(\"\")\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"AddTo\">\r\n            <Button className=\"m-2\" color=\"primary\" onClick={toggle}>+ New Transaction</Button>\r\n            <Modal isOpen={modal} toggle={toggle}>\r\n                <ModalBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Input type=\"text\" placeholder=\"Name\" value={name} onChange={handleChangeName} />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Input type=\"textarea\" placeholder=\"Description\" value={description} onChange={handleChangeDescription} />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Input type=\"date\" placeholder=\"Date\" value={date} onChange={handleChangeDate} />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Input type=\"number\" placeholder=\"Amount\" value={amount} onChange={handleChangeAmount} />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Input type=\"select\" name=\"select\" value={currency} onChange={handleChangeCurrency} >\r\n                                <option>TRY</option>\r\n                                <option>EUR</option>\r\n                                <option>USD</option>\r\n                            </Input>\r\n                        </FormGroup>\r\n                    </Form>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <div className=\"save-exit\">\r\n                        <Button className=\"ml-2\" color=\"success\" type=\"submit\" onClick={handleSubmit}>Save</Button>\r\n                    </div>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddTo;","import { Somethings } from './types'\r\n\r\nconst initialStore: Array<Somethings> = [\r\n    {\r\n      id: 1,\r\n      name: \"Kablonet\",\r\n      description: \"Turksat Kablonet internet ödemesi\",\r\n      date: \"2020-01-02\",\r\n      amount: \"120\",\r\n      currency: \"TRY\",\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Turkcell\",\r\n      description: \"Turkcell fatura ödemesi\",\r\n      date: \"2020-07-09\",\r\n      amount: \"50\",\r\n      currency: \"TRY\",\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Doğalgaz\",\r\n      description: \"Doğalgaz fatura ödemesi\",\r\n      date: \"2020-07-09\",\r\n      amount: \"200\",\r\n      currency: \"TRY\",\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"Elektrik\",\r\n      description: \"Elektrik fatura ödemesi\",\r\n      date: \"2020-07-09\",\r\n      amount: \"120\",\r\n      currency: \"TRY\",\r\n    },\r\n    {\r\n      id: 5,\r\n      name: \"Su\",\r\n      description: \"Su fatura ödemesi\",\r\n      date: \"2020-07-09\",\r\n      amount: \"70\",\r\n      currency: \"TRY\",\r\n    },\r\n    {\r\n      id: 6,\r\n      name: \"Vodafone\",\r\n      description: \"Vodafone fatura ödemesi\",\r\n      date: \"2020-02-06\",\r\n      amount: \"40\",\r\n      currency: \"TRY\",\r\n    },\r\n    {\r\n      id: 7,\r\n      name: \"Kira\",\r\n      description: \"Kira ödemesi\",\r\n      date: \"2020-03-01\",\r\n      amount: \"2500\",\r\n      currency: \"TRY\",\r\n    },\r\n    {\r\n      id: 8,\r\n      name: \"Amazon\",\r\n      description: \"Amazon - Bluetooth kablosuz kulaklık\",\r\n      date: \"2020-03-07\",\r\n      amount: \"65\",\r\n      currency: \"USD\",\r\n    },\r\n    {\r\n      id: 9,\r\n      name: \"Market\",\r\n      description: \"Market Alışverişi\",\r\n      date: \"2020-03-08\",\r\n      amount: \"107,90\",\r\n      currency: \"TRY\",\r\n    },\r\n    {\r\n      id: 10,\r\n      name: \"Taksit\",\r\n      description: \"Taksit - Laptop 3/4 taksit ödemesi\",\r\n      date: \"2020-03-16\",\r\n      amount: \"1500\",\r\n      currency: \"TRY\",\r\n    },\r\n  ];\r\n  export default initialStore","import React, { useState, ChangeEvent, FormEvent } from 'react'\r\nimport { AddToStore, ShowForm } from './types'\r\nimport { Button, Modal, ModalBody, ModalFooter, Form, Input, FormGroup } from 'reactstrap';\r\ninterface EditToProps {\r\n    addToStore: AddToStore\r\n    current: any\r\n    total: number\r\n    openEdit: ShowForm\r\n    modal: boolean\r\n    toggle: ShowForm\r\n}\r\nconst EditTo: React.FC<EditToProps> = ({ current, addToStore, total, openEdit, modal, toggle }) => {\r\n    const [cur] = useState(current)\r\n    const [name, setName] = useState(cur.name)\r\n    const [id] = useState(cur.id)\r\n    const [description, setDescription] = useState(cur.description)\r\n    const [date, setDate] = useState(cur.date)\r\n    const [amount, setAmount] = useState(cur.amount)\r\n    const [currency, setCurrency] = useState(cur.currency)\r\n\r\n    const handleChangeName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.target.value)\r\n\r\n    }\r\n    const handleChangeDescription = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setDescription(e.target.value)\r\n\r\n    }\r\n    const handleChangeDate = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setDate(e.target.value)\r\n\r\n    }\r\n    const handleChangeAmount = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setAmount(e.target.value)\r\n\r\n    }\r\n    const handleChangeCurrency = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setCurrency(e.target.value)\r\n    }\r\n    const handleSubmit = (e: FormEvent<HTMLButtonElement>) => {\r\n        e.preventDefault()\r\n        if (name.length === 0 || description.length === 0 || date.length === 0 || amount.length === 0) {\r\n            alert(\"Eksik yer kaldı\")\r\n        } else {\r\n            addToStore(id, name, description, date, amount, currency)\r\n            setAmount(\"\")\r\n            setName(\"\")\r\n            setDescription(\"\")\r\n            setCurrency(\"\")\r\n            setDate(\"\")\r\n            openEdit()\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"show-true ml-3\">\r\n            {/* <Row>\r\n                <form>\r\n                    <input type=\"text\" placeholder={cur.name} value={name} onChange={handleChangeName} />\r\n                    <input type=\"textarea\" placeholder={cur.description} value={description} onChange={handleChangeDescription} />\r\n                    <input type=\"date\" placeholder={cur.date} value={date} onChange={handleChangeDate} />\r\n                    <input type=\"number\" placeholder={cur.amount} value={amount} onChange={handleChangeAmount} />\r\n                    <select name=\"currency\" value={currency} onChange={handleChangeCurrency} >\r\n                        <option>TRY</option>\r\n                        <option>EUR</option>\r\n                        <option>USD</option>\r\n                    </select>\r\n                </form>\r\n            </Row>\r\n            <Row>\r\n                <div className=\"save-exit\">\r\n                    <Button className=\"ml-2\" color=\"success\" type=\"submit\" onClick={handleSubmit}>Save</Button>\r\n                    <Button className=\"ml-2\" onClick={openEdit} >Back</Button>\r\n                </div>\r\n            </Row> */}\r\n            <Modal isOpen={modal} toggle={toggle}>\r\n                <ModalBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Input type=\"text\" placeholder=\"Name\" value={name} onChange={handleChangeName} />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Input type=\"textarea\" placeholder=\"Description\" value={description} onChange={handleChangeDescription} />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Input type=\"date\" placeholder=\"Date\" value={date} onChange={handleChangeDate} />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Input type=\"number\" placeholder=\"Amount\" value={amount} onChange={handleChangeAmount} />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Input type=\"select\" name=\"select\" value={currency} onChange={handleChangeCurrency} >\r\n                                <option>TRY</option>\r\n                                <option>EUR</option>\r\n                                <option>USD</option>\r\n                            </Input>\r\n                        </FormGroup>\r\n                    </Form>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <div className=\"save-exit\">\r\n                        <Button className=\"ml-2\" color=\"success\" type=\"submit\" onClick={handleSubmit}>Save</Button>\r\n                    </div>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\nexport default EditTo;","import React from 'react';\r\nimport './Transaction.css';\r\nimport { Somethings, Selected } from './types'\r\nimport { Button, Table, } from 'reactstrap';\r\nimport { CSSTransition } from 'react-transition-group';\r\ninterface TransactionProps {\r\n    store: Array<Somethings>\r\n    handleDelete: Selected\r\n    editIs: Selected\r\n    inProp: boolean\r\n}\r\n\r\nconst TransactionList: React.FC<TransactionProps> = ({ store, handleDelete, editIs, inProp, }) => {\r\n    return (\r\n        <div className=\"table\">\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>NAME</th>\r\n                        <th>Description</th>\r\n                        <th>Transaction Date</th>\r\n                        <th>Amount</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>{\r\n                    store.map(s =>\r\n                        <CSSTransition in={inProp} timeout={1000} classNames=\"fade\" key={s.id}>\r\n                            <tr >\r\n                                <th scope=\"row\">{s.id}</th>\r\n                                <td>{s.name}</td>\r\n                                <td>{s.description}</td>\r\n                                <td>{s.date}</td>\r\n                                <td> {s.currency} {s.amount}</td>\r\n                                <td>\r\n                                    <Button color=\"dark\" onClick={() => editIs(s)}><i className=\"fas fa-edit\" ></i></Button>\r\n                                    <Button className=\"ml-2\" color=\"danger\" onClick={() => handleDelete(s)}>&times;</Button>\r\n                                </td>\r\n                            </tr>\r\n                        </CSSTransition>\r\n                    )\r\n                }\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\nexport default TransactionList","import React, { useState } from \"react\";\r\nimport AddTo from \"./AddTo\";\r\nimport initialStore from './initialStore'\r\nimport EditTo from './EditTo'\r\nimport TransactionList from \"./TransactionList\";\r\nimport {\r\n  AddToStore,\r\n  Selected,\r\n  ShowForm,\r\n} from \"./types\";\r\nimport \"./Transaction.css\";\r\n\r\nconst Transaction: React.FC = () => {\r\n  const [store, setStore] = useState(initialStore);\r\n  const [total, setTotal] = useState<number>(store.length + 1);\r\n  const [current, setCurrent] = useState<any>();\r\n  const [inProp, setInProp] = useState(false);\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const time: ShowForm = () => {\r\n    setInProp(true)\r\n    setTimeout(function () { setInProp(false) }, 1000)\r\n  }\r\n  const editIs: Selected = (selected) => {\r\n    setCurrent(selected);\r\n    toggle()\r\n  };\r\n  const handleDelete: Selected = (selected) => {\r\n    time()\r\n    const newStore = store.filter((s) => s.id !== selected.id);\r\n    setStore(newStore);\r\n    setTotal(total - 1);\r\n  };\r\n\r\n  const addToStore: AddToStore = (\r\n    total,\r\n    name,\r\n    description,\r\n    date,\r\n    amount,\r\n    currency\r\n  ) => {\r\n    const filter = store.filter((s) => s.id !== total);\r\n    setStore([\r\n      ...filter,\r\n      {\r\n        id: total,\r\n        name: name,\r\n        description: description,\r\n        date: date,\r\n        amount: amount,\r\n        currency: currency,\r\n      },\r\n    ]);\r\n    setTotal(total + 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"transaction\">\r\n      <React.Fragment>\r\n        <AddTo addToStore={addToStore} total={total} />\r\n        {modal ? (\r\n          <EditTo\r\n            openEdit={toggle}\r\n            addToStore={addToStore}\r\n            total={total}\r\n            current={current}\r\n            modal={modal}\r\n            toggle={toggle}\r\n          />\r\n        ) : (\r\n            null\r\n          )}\r\n        <TransactionList\r\n          editIs={editIs}\r\n          store={store}\r\n          handleDelete={handleDelete}\r\n          inProp={inProp}\r\n        />\r\n      </React.Fragment>\r\n    </div>\r\n  );\r\n};\r\nexport default Transaction;\r\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/dashboard/Dashboard';\nimport { Row, Col } from 'reactstrap';\nimport Navi from './components/navi/Navi';\nimport Transaction from './components/transaction/Transaction'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Navi/>\n        <Row>\n           <Col xs=\"3\">\n             <Dashboard/>\n           </Col>\n           <Col xs=\"9\">\n             <Transaction/>\n           </Col>\n        </Row>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport './index.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}